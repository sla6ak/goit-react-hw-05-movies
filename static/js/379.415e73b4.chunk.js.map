{"version":3,"file":"static/js/379.415e73b4.chunk.js","mappings":"sOAEaA,EAAYC,EAAAA,EAAAA,GAAH,uJASTC,EAAYD,EAAAA,EAAAA,IAAH,oCAITE,EAAYF,EAAAA,EAAAA,IAAH,wCAITG,EAAWH,EAAAA,EAAAA,IAAH,wC,0DCgCrB,EA3CyB,WAAO,IAAD,QAC7B,GAAgCI,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACJE,GAAQC,EAAAA,EAAAA,MACRC,GAAWC,EAAAA,EAAAA,MAgBf,OAVAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcP,GAASQ,MAAK,SAACC,GAC7BV,EAAYU,QACX,CAACT,KAQF,iCACE,SAACU,EAAA,EAAD,CAAQC,QAAS,WAAO,IAAD,IACnBT,EAAK,iBAACE,QAAD,IAACA,GAAD,UAACA,EAAUQ,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,MAC9BC,QAAQ,YAAYC,GAAI,CAACC,GAAI,QAFlC,mBAGA,SAACxB,EAAD,UAAYM,EAASmB,kBACrB,UAACtB,EAAD,WACGG,EAASoB,aAAc,SAACxB,EAAD,CAAWyB,IA7BxB,kCA6B0CrB,EAASoB,YAAaE,IAAI,MAAQ,SAAC1B,EAAD,CAAWyB,IAAI,2EAA2EC,IAAI,MACrL,4BACE,UAACxB,EAAD,gBAAW,uCAAoBE,EAASuB,aACxC,UAACzB,EAAD,YAAU,2CAAwBE,EAASwB,iBAC3C,UAAC1B,EAAD,YAAU,2CAAwBE,EAASyB,uBAG/C,SAAC,KAAD,CAASC,MAAOC,EAAAA,EAAWC,UAAU,UAAUC,GAAG,OAAOf,MAAO,CAAEC,KAAI,iBAAET,QAAF,IAAEA,GAAF,UAAEA,EAAUQ,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAAjG,mBACA,SAAC,KAAD,CAASW,MAAOC,EAAAA,EAAWE,GAAG,UAAUf,MAAO,CAAEC,KAAI,iBAAET,QAAF,IAAEA,GAAF,UAAEA,EAAUQ,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAAhF,sBACA,SAAC,EAAAe,SAAD,CAAUC,UAAU,6CAApB,UACE,SAAC,KAAD,CAAQC,QAAS,CAAChC,Y,uIC3CpBiC,EAAU,gCACVC,EAAM,mCAECC,EAAgB,mCAAG,+FACtBC,EAAO,IAAIC,gBAAgB,CAC7BC,QAASJ,EACTK,KAAM,IAHkB,SAKZC,MAAM,GAAD,OAAIP,EAAJ,+BAAkCG,IAL3B,cAKtBK,EALsB,gBAMZA,EAAEC,OANU,cAMtB/B,EANsB,yBAOrBA,GAPqB,2CAAH,qDAUhBgC,EAAc,mCAAG,WAAOC,EAAaC,GAApB,kFACrBD,EADqB,wDAEpBE,EAFoB,UAEZ,IAAIT,gBAAgBQ,GAAQE,IAAI,gBAFpB,QAEgC,GACpDX,EAAO,IAAIC,gBAAgB,CAC7BC,QAASJ,EACTK,KAAM,EACNO,MAAAA,EACAE,eAAe,IAPO,SASVR,MAAM,GAAD,OAAIP,EAAJ,wBAA2BG,IATtB,cASpBK,EAToB,gBAUVA,EAAEC,OAVQ,cAUpB/B,EAVoB,yBAWnBA,GAXmB,4CAAH,wDAcdF,EAAa,mCAAG,WAAOwC,GAAP,kFACnBb,EAAO,IAAIC,gBAAgB,CAC7BC,QAASJ,IAFY,SAITM,MAAM,GAAD,OAAIP,EAAJ,iBAAoBgB,EAApB,YAA0Bb,EAA1B,wCAJI,cAInBK,EAJmB,gBAKTA,EAAEC,OALO,cAKnB/B,EALmB,yBAMlBA,GANkB,2CAAH","sources":["components/MovieDetailsPage/MovieDetailsPage.styled.jsx","components/MovieDetailsPage/MovieDetailsPage.jsx","utilits/fetchAPI.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const TitleFilm = styled.h1`\ncolor: #2e2e33;\ndisplay: flex;\njustify-content: center;\nmargin-bottom: 20px;\nbackground-color: #1717ad21;\npadding: 10px;\n`\n\nexport const BigPoster = styled.img`\nmargin: 0;\n`\n\nexport const BoxPoster = styled.div`\ndisplay: flex;\n`\n\nexport const Overview = styled.div`\npadding: 15px;\n`\n","import { useState, useEffect, Suspense } from 'react'\nimport { TitleFilm, BigPoster, BoxPoster, Overview } from './MovieDetailsPage.styled'\nimport { useParams, useNavigate, NavLink, Outlet, useLocation } from 'react-router-dom' //useLocation\nimport { Button } from '@mui/material';\nimport { findFilmsInfo } from 'utilits/fetchAPI';\nimport { linkActiv } from 'utilits/linkActive';\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/w300';\n\nconst MovieDetailsPage = () => {\n  const [filmInfo, setFilmInfo] = useState({})\n  const { movieId } = useParams()\n  let navig = useNavigate()\n  let location = useLocation()\n\n  // console.log(location);\n   // почему то тут прилитает nall в стейте\n  //location?.pathname?.from ?? '/'\n\n  useEffect(() => {\n    findFilmsInfo(movieId).then((r)=>{\n    setFilmInfo(r)})\n  }, [movieId])\n\n  //   useEffect(() => {\n  // console.log(filmInfo.reviews);\n  // }, [filmInfo])\n//  onClick={()=>navig(-1)}// на кнопку вешалось\n  \n  return (\n    <>\n      <Button onClick={() => {\n          navig(location?.state?.from ?? '/');\n        }} variant='contained' sx={{mb: '10px'}}>Back</Button>\n      <TitleFilm>{filmInfo.original_title}</TitleFilm>\n      <BoxPoster>\n        {filmInfo.poster_path ? <BigPoster src={imgBaseUrl + filmInfo.poster_path} alt=\"\" /> : <BigPoster src='https://www.jakartaplayers.org/uploads/1/2/5/5/12551960/2297419_orig.jpg' alt=\"\" />}\n        <div>\n          <Overview> <h3>Overview: </h3>{filmInfo.overview}</Overview>\n          <Overview><h3>Release date: </h3>{filmInfo.release_date}</Overview>\n          <Overview><h3>Vote average: </h3>{filmInfo.vote_average}</Overview>\n        </div>\n      </BoxPoster>\n      <NavLink style={linkActiv} className='linkBar' to='cast' state={{ from: location?.state?.from ?? '/' }}>cast</NavLink>\n      <NavLink style={linkActiv} to='reviews' state={{ from: location?.state?.from ?? '/' }}>reviews</NavLink>\n      <Suspense fallback={<h1>Wite one more...</h1>}>\n        <Outlet context={[filmInfo]} />\n      </Suspense>\n      </>\n  )\n}\n\nexport default MovieDetailsPage","// https://api.themoviedb.org/3/movie/550?api_key=c4ff5df06d9c3bc212d0ff99e5222626\n\nconst baseUrl = \"https://api.themoviedb.org/3/\"\nconst KEY = 'c4ff5df06d9c3bc212d0ff99e5222626'\n\nexport const findPopularFilms = async () => {\n    const meta = new URLSearchParams({\n        api_key: KEY,\n        page: 1,\n    });\n    const f = await fetch(`${baseUrl}trending/movie/week?${meta}`)\n    const r = await f.json()\n    return r\n}\n\nexport const findFilmsTitle = async (searchQuery, search) => {\n    if (!searchQuery) return;\n    const query = new URLSearchParams(search).get('query') ?? ''; // если данные формы утеряны то поисковое слово пустая строка\n    const meta = new URLSearchParams({\n        api_key: KEY,\n        page: 1,\n        query, // тут будет полученный квери(слово поиска) из формсабмита который прилетает в переменной search\n        include_adult: false,\n    });\n    const f = await fetch(`${baseUrl}search/movie?${meta}`)\n    const r = await f.json()\n    return r\n}\n\nexport const findFilmsInfo = async (id) => {\n    const meta = new URLSearchParams({\n        api_key: KEY,\n    });\n    const f = await fetch(`${baseUrl}movie/${id}?${meta}&append_to_response=credits,reviews`)\n    const r = await f.json()\n    return r\n}"],"names":["TitleFilm","styled","BigPoster","BoxPoster","Overview","useState","filmInfo","setFilmInfo","movieId","useParams","navig","useNavigate","location","useLocation","useEffect","findFilmsInfo","then","r","Button","onClick","state","from","variant","sx","mb","original_title","poster_path","src","alt","overview","release_date","vote_average","style","linkActiv","className","to","Suspense","fallback","context","baseUrl","KEY","findPopularFilms","meta","URLSearchParams","api_key","page","fetch","f","json","findFilmsTitle","searchQuery","search","query","get","include_adult","id"],"sourceRoot":""}